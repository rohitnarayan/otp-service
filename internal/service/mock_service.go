// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mock_service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	store "github.com/rohitnarayan/otp-service/internal/store"
)

// MockOTPService is a mock of OTPService interface.
type MockOTPService struct {
	ctrl     *gomock.Controller
	recorder *MockOTPServiceMockRecorder
}

// MockOTPServiceMockRecorder is the mock recorder for MockOTPService.
type MockOTPServiceMockRecorder struct {
	mock *MockOTPService
}

// NewMockOTPService creates a new mock instance.
func NewMockOTPService(ctrl *gomock.Controller) *MockOTPService {
	mock := &MockOTPService{ctrl: ctrl}
	mock.recorder = &MockOTPServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOTPService) EXPECT() *MockOTPServiceMockRecorder {
	return m.recorder
}

// CreateOTP mocks base method.
func (m *MockOTPService) CreateOTP(ctx context.Context, userID string) (*store.OTPModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOTP", ctx, userID)
	ret0, _ := ret[0].(*store.OTPModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOTP indicates an expected call of CreateOTP.
func (mr *MockOTPServiceMockRecorder) CreateOTP(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOTP", reflect.TypeOf((*MockOTPService)(nil).CreateOTP), ctx, userID)
}
